#!/bin/bash

set -e
#set -x

do=$1

dry=true
if [[ $do == "do" ]]; then
	dry=false
fi;
command="echo rsync"
if [[ "$dry" == false ]]; then
	read -n 1 -p "This is not a dry run! Type y to continue: " confirm
	if [[ "$confirm" != "y" ]]; then
		exit 0
	fi;
	command="rsync"
else
	echo "This is a dry run; to run the real deal, type \"do\" after the command"
fi;

function mountDevice {
	device=$1
	mkdir -p /mnt/$device
	if [[ $(mount | grep /mnt/$device) ]]; then
		echo "$device already mounted"
	else
		mount /dev/$device /mnt/$device
		echo "$device was mounted"
	fi;
}

function umountDevice {
	device=$1
	if [[ $(mount | grep /mnt/$device) ]]; then
		umount /mnt/$device
		rmdir /mnt/$device
		echo "$device was umounted"
	else
		echo "$device is not mounted"
	fi;
}

function syncFromTo {
	from=$1
	to=$2
	opts=$3
	umountDevice $from
	umountDevice $to
	mountDevice $from
	mountDevice $to
	# TODO: maybe mount source device as read only

	echo "start sync $from to $to"
	if [[ $opts == "delete" ]]; then
		$command -axHAWXS --numeric-ids --info=progress2 \
		--delete --delete-excluded --exclude='/.gvfs/' --exclude="/mnt/" \
		/mnt/$from/ /mnt/$to/
	else
		$command -axHAWXS --numeric-ids --info=progress2 \
		--delete-excluded --exclude='/.gvfs/' --exclude="/mnt/" \
		/mnt/$from/ /mnt/$to/
	fi;
	echo "done sync $from to $to"

	umountDevice $from
	umountDevice $to
}

# backup system primary
syncFromTo sda1 sdb1
#syncFromTo sda5 sdb5

# backup system secondary
#syncFromTo sdb1 sdc1
#syncFromTo sdb5 sdc2

# TODO: option to sync without delete, needed for storage
# TODO: option to define pipelines, eg: sdb5-sdc2,delete; sda4-sdb4,keep
# TODO: option to choose target at runtime: primary system, secondary system, primary storage, secondary storage

